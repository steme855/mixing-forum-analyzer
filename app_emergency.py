#!/usr/bin/env python3
"""
Mixing Forum Analyzer - EMERGENCY VERSION
Ohne spaCy und sentence-transformers (die blockieren)
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from rapidfuzz import fuzz
import json
from pathlib import Path
import re

# Streamlit Config
st.set_page_config(
    page_title="Mixing Forum Analyzer",
    page_icon="üéö",
    layout="wide"
)

st.title("üéö Mixing Forum Analyzer")
st.markdown("**KI-gest√ºtzte Suche nach √§hnlichen Audio-Engineering Problemen**")

# Status
st.sidebar.error("‚ö†Ô∏è  NOTFALL-MODUS")
st.sidebar.info("spaCy und SBERT deaktiviert")
st.sidebar.success("‚úÖ TF-IDF funktioniert")

# Korpus laden (ohne externe Dependencies)
@st.cache_data
def load_simple_corpus():
    """L√§dt Korpus ohne externe Dependencies"""

    corpus_path = Path("data/sample_corpus.json")

    if corpus_path.exists():
        try:
            with open(corpus_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    return data
        except Exception as e:
            st.warning(f"Korpus-Fehler: {e}")

    # Fallback-Korpus
    fallback = [
        "Snare klingt zu harsch und metallisch im Mix",
        "Kick Drum hat zu wenig Punch und verschwindet im Bass",
        "Bass maskiert die Kick und macht den Mix muddy und dumpf",
        "Vocals sitzen nicht im Mix und klingen d√ºnn und schwach",
        "Hi-Hats sind zu schrill und stechen durch den ganzen Mix",
        "Der gesamte Mix klingt leblos und √ºberkomprimiert",
        "Gitarren k√§mpfen um den gleichen Frequenzbereich und maskieren sich",
        "Der Mix ist zu bass-lastig und dr√∂hnt in kleinen R√§umen",
        "Die Stereobreite fehlt komplett, alles klingt mono",
        "Reverb klingt k√ºnstlich wie Badezimmer-Hall",
        "Kompression zerst√∂rt die Dynamik und macht alles platt",
        "EQ klingt harsch, besonders im Hochtonbereich",
        "Deessing greift zu stark ein und macht Vocals dumpf",
        "Sidechain-Kompression pumpt zu extrem",
        "Monitoring ist schlecht kalibriert und t√§uscht √ºber den Mix",
        "Low-End ist nicht tight und verschmiert",
        "Midrange ist zu prominent und erm√ºdend",
        "Transienten gehen durch Overprocessing verloren",
        "Panning ist unausgewogen und einseitig",
        "Mastering-Chain ist zu aggressiv eingestellt"
    ]

    st.info(f"üì¶ Fallback-Korpus mit {len(fallback)} Problemen geladen")
    return fallback

# Einfache TF-IDF Suche (ohne ML-Dependencies)
@st.cache_data
def build_simple_search_index(corpus_texts):
    """Baut TF-IDF Index ohne externe ML-Libs"""

    try:
        vectorizer = TfidfVectorizer(
            lowercase=True,
            ngram_range=(1, 2),
            min_df=1,
            max_df=0.95,
            stop_words=None  # Keine deutschen Stopwords ohne spaCy
        )

        tfidf_matrix = vectorizer.fit_transform(corpus_texts)
        return vectorizer, tfidf_matrix

    except Exception as e:
        st.error(f"‚ùå TF-IDF Fehler: {e}")
        return None, None

def search_problems(query, corpus, vectorizer, tfidf_matrix, max_results=5):
    """Sucht √§hnliche Probleme mit TF-IDF"""

    if not query.strip():
        return []

    try:
        # Query-Vektor erstellen
        query_vec = vectorizer.transform([query.strip()])

        # √Ñhnlichkeiten berechnen
        similarities = (tfidf_matrix * query_vec.T).toarray().flatten()

        # Top-Ergebnisse
        top_indices = np.argsort(similarities)[::-1][:max_results]

        results = []
        for idx in top_indices:
            score = similarities[idx]
            if score > 0.01:  # Minimum threshold
                results.append({
                    'text': corpus[idx],
                    'score': score,
                    'index': idx
                })

        return results

    except Exception as e:
        st.error(f"‚ùå Suchfehler: {e}")
        return []

# Basis-Presets ohne externe Dependencies
def get_simple_presets(problem_text):
    """Einfache Preset-Vorschl√§ge basierend auf Keywords"""

    text_lower = problem_text.lower()
    suggestions = []

    preset_map = {
        "snare": {
            "frequencies": "200 Hz (K√∂rper), 5 kHz (Pr√§senz)",
            "techniques": "EQ-Boost, Kompression mit mittlerer Ratio",
            "tip": "Vermeide harsche Frequenzen um 3-4 kHz"
        },
        "kick": {
            "frequencies": "60-80 Hz (Sub), 2-5 kHz (Click)",
            "techniques": "Sub-Boost, Hochpass f√ºr Klarheit",
            "tip": "Sidechain-Kompression gegen Bass"
        },
        "vocal": {
            "frequencies": "800 Hz (W√§rme), 3-5 kHz (Pr√§senz)",
            "techniques": "Presence-Boost, De-Essing",
            "tip": "Kompression f√ºr gleichm√§√üige Lautst√§rke"
        },
        "bass": {
            "frequencies": "40-80 Hz (Fundament), 800 Hz (Definition)",
            "techniques": "Hochpass um 30 Hz, Kompression",
            "tip": "Mono unter 100 Hz f√ºr Tightness"
        },
        "gitarre": {
            "frequencies": "100 Hz (Hochpass), 3 kHz (Pr√§senz)",
            "techniques": "Midrange-Sculpting",
            "tip": "Panning f√ºr Platz im Mix"
        }
    }

    for instrument, preset in preset_map.items():
        if instrument in text_lower:
            suggestions.append(f"**{instrument.title()}**: {preset['frequencies']}")
            suggestions.append(f"‚Ä¢ {preset['techniques']}")
            suggestions.append(f"‚Ä¢ {preset['tip']}")

    return suggestions

# Main App
def main():
    # Korpus laden
    with st.spinner("Lade Korpus..."):
        corpus = load_simple_corpus()

    if not corpus:
        st.error("‚ùå Konnte Korpus nicht laden")
        return

    # Search Index bauen
    with st.spinner("Baue Suchindex..."):
        vectorizer, tfidf_matrix = build_simple_search_index(corpus)

    if vectorizer is None:
        st.error("‚ùå Konnte Suchindex nicht erstellen")
        return

    st.success(f"‚úÖ {len(corpus)} Mixing-Probleme indexiert")

    # Search Interface
    st.subheader("üîç Problem-Suche")

    col1, col2 = st.columns([3, 1])

    with col1:
        query = st.text_area(
            "Beschreibe dein Mixing-Problem:",
            placeholder="z.B. Snare klingt harsch und metallisch...",
            height=100
        )

    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        max_results = st.slider("Max. Ergebnisse:", 3, 10, 5)
        search_clicked = st.button("üîç Suchen", type="primary")

    # Suche ausf√ºhren
    if search_clicked and query.strip():
        with st.spinner("Suche l√§uft..."):
            results = search_problems(query, corpus, vectorizer, tfidf_matrix, max_results)

        if results:
            st.subheader(f"üéØ Gefunden: {len(results)} √§hnliche Probleme")

            for i, result in enumerate(results):
                with st.expander(f"#{i+1} ‚Ä¢ {result['text'][:60]}... (Score: {result['score']:.3f})"):
                    st.write(result['text'])

                    # Einfache Preset-Vorschl√§ge
                    suggestions = get_simple_presets(result['text'])
                    if suggestions:
                        st.markdown("**üí° L√∂sungsans√§tze:**")
                        for suggestion in suggestions:
                            st.markdown(f"‚Ä¢ {suggestion}")
        else:
            st.info("Keine relevanten Ergebnisse gefunden. Versuche andere Keywords.")

    elif search_clicked:
        st.warning("Bitte gib eine Suchanfrage ein.")

    # Info
    st.markdown("---")
    st.markdown("‚ö†Ô∏è  **Notfall-Modus**: Diese Version l√§uft ohne spaCy/SBERT wegen Import-Problemen")
    st.markdown("üîß **Funktionen**: TF-IDF Suche, Basis-Presets, Keyword-Matching")

if __name__ == "__main__":
    main()
