#!/usr/bin/env python3
"""
Check Python Version und ML-Library Kompatibilit√§t
"""

import sys
import platform

def check_python_ml_compatibility():
    """√úberpr√ºft Python-Version und ML-Kompatibilit√§t"""

    print("üêç PYTHON & ML-KOMPATIBILIT√ÑT CHECK")
    print("=" * 50)

    print(f"Python Version: {sys.version}")
    print(f"Platform: {platform.platform()}")
    print(f"Architecture: {platform.architecture()[0]}")

    py_version = sys.version_info

    print("\nüìä KOMPATIBILIT√ÑTS-BEWERTUNG:")

    if py_version.major == 3 and py_version.minor == 12:
        print("üî¥ Python 3.12: PROBLEMATISCH f√ºr ML-Libraries")
        print("   ‚Ä¢ spaCy: Bekannte Import-Probleme")
        print("   ‚Ä¢ sentence-transformers: H√§ngt oft beim Import")  
        print("   ‚Ä¢ transformers: Sehr langsam beim ersten Import")
        print("\nüí° EMPFEHLUNG: Wechsel zu Python 3.11 oder 3.10")

    elif py_version.major == 3 and py_version.minor == 11:
        print("‚úÖ Python 3.11: OPTIMAL f√ºr ML-Libraries")
        print("   ‚Ä¢ Beste Balance aus Performance und Kompatibilit√§t")

    elif py_version.major == 3 and py_version.minor == 10:
        print("‚úÖ Python 3.10: SEHR GUT f√ºr ML-Libraries")
        print("   ‚Ä¢ Bew√§hrt und stabil mit allen ML-Frameworks")

    elif py_version.minor < 10:
        print("‚ö†Ô∏è  Python < 3.10: Teilweise veraltet")
        print("   ‚Ä¢ Manche neuere Features nicht verf√ºgbar")

    else:
        print(f"‚ùì Python {py_version.major}.{py_version.minor}: Unbekannt")

    # Teste verf√ºgbare Alternativen
    print("\nüîÑ PYTHON-VERSION WECHSELN:")
    print("# Neue venv mit Python 3.11 erstellen:")
    print("python3.11 -m venv venv_311")
    print("source venv_311/bin/activate")
    print("pip install -r requirements.txt")

if __name__ == "__main__":
    check_python_ml_compatibility()
